#!/bin/bash

# Laravel Translation Sync Pre-commit Hook
# Detects changes to existing translation keys and translates them to all other languages

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔍 Checking for translation changes...${NC}"

# Get the list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Check if any translation files are in the staged changes
TRANSLATION_CHANGES=$(echo "$STAGED_FILES" | grep -E '^lang/.*\.php$|^resources/lang/.*\.php$' || true)

if [ -z "$TRANSLATION_CHANGES" ]; then
    echo -e "${GREEN}✓ No translation changes detected. Proceeding with commit.${NC}"
    exit 0
fi

echo -e "${YELLOW}📝 Translation changes detected:${NC}"
echo "$TRANSLATION_CHANGES" | while read file; do
    echo "  - $file"
done

# Check if Claude Code CLI is installed
if ! command -v claude &> /dev/null; then
    echo -e "${RED}✗ Claude Code CLI not found. Please install it first.${NC}"
    echo -e "${YELLOW}  Install with: npm install -g @anthropic-ai/claude-code${NC}"
    exit 1
fi

# Determine the lang directory path
if [ -d "lang" ]; then
    LANG_DIR="lang"
elif [ -d "resources/lang" ]; then
    LANG_DIR="resources/lang"
else
    echo -e "${RED}✗ Could not find Laravel lang directory.${NC}"
    exit 1
fi

# Get all language directories
LANGUAGES=$(find "$LANG_DIR" -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)
LANG_COUNT=$(echo "$LANGUAGES" | wc -l)

echo -e "${BLUE}🌍 Found $LANG_COUNT language(s):${NC}"
echo "$LANGUAGES" | while read lang; do
    echo "  - $lang"
done

# Analyze the git diff to extract modified translation keys
echo -e "${BLUE}🔬 Analyzing changes to detect modified keys...${NC}"

# Create a temporary file to store the analysis
TEMP_ANALYSIS=$(mktemp)

# For each changed translation file, extract the diff
for file in $TRANSLATION_CHANGES; do
    if git diff --cached "$file" > /dev/null 2>&1; then
        echo "=== FILE: $file ===" >> "$TEMP_ANALYSIS"
        git diff --cached "$file" >> "$TEMP_ANALYSIS"
        echo "" >> "$TEMP_ANALYSIS"
    fi
done

# Check if there are actual content changes
if [ ! -s "$TEMP_ANALYSIS" ]; then
    echo -e "${GREEN}✓ No content changes in translation files. Proceeding with commit.${NC}"
    rm -f "$TEMP_ANALYSIS"
    exit 0
fi

# Extract language from changed files to determine source language
SOURCE_LANG=$(echo "$TRANSLATION_CHANGES" | head -1 | sed -E 's|.*/([a-z]{2})/.*|\1|')

# Build detailed prompt for Claude
PROMPT="I need you to analyze Laravel translation file changes and sync them across all languages.

📋 CONTEXT:
- Translation directory: $LANG_DIR
- Languages available: $(echo $LANGUAGES | tr '\n' ', ')
- Source language (being modified): $SOURCE_LANG
- Number of files changed: $(echo "$TRANSLATION_CHANGES" | wc -l)

🎯 YOUR TASK:

1. ANALYZE THE DIFF:
   - Read the git diff output I've captured below
   - Identify which translation keys had their VALUES modified (look for lines with '-' and '+')
   - Note any new keys added or keys removed
   - Extract the file structure (e.g., messages.php, auth.php, etc.)

2. FOR EACH MODIFIED OR NEW KEY:
   - Find the corresponding file in ALL other language directories
   - Update the translation value for that key in each language
   - Translate the new value from $SOURCE_LANG to the target language
   - Maintain the exact same array structure, formatting, and PHP syntax

3. IMPORTANT RULES:
   - Only modify the VALUES of keys, never change the key names
   - Preserve PHP array formatting (spacing, indentation, quotes)
   - Ensure all languages have the same set of keys after sync
   - If a key was removed from $SOURCE_LANG, remove it from all languages
   - If a key's value changed in $SOURCE_LANG, translate the new value to all languages
   - Maintain proper PHP syntax in all files
   - Keep comments if they exist

4. OUTPUT:
   After completing the sync, provide a summary showing:
   - Which keys were modified/added/removed
   - Which languages were updated
   - Any issues encountered

📊 GIT DIFF OUTPUT:
\`\`\`diff
$(cat "$TEMP_ANALYSIS")
\`\`\`

Please proceed to analyze and sync the translations now."

# Clean up temp file
rm -f "$TEMP_ANALYSIS"

echo -e "${BLUE}🤖 Running Claude Code to analyze and sync translations...${NC}"
echo ""

# Execute Claude Code with the prompt
# Using --yes flag to auto-approve changes (remove if you want manual approval)
claude --dangerously-skip-permissions -p "$PROMPT"

# Check if Claude Code execution was successful
if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}✓ Translation sync completed successfully!${NC}"

    # Stage any new translation changes that Claude made
    git add "$LANG_DIR"

    echo -e "${GREEN}✓ Updated translation files have been staged.${NC}"
    echo -e "${BLUE}📋 Proceeding with commit...${NC}"
    exit 0
else
    echo ""
    echo -e "${RED}✗ Translation sync failed. Please review the changes manually.${NC}"
    echo -e "${YELLOW}You can bypass this hook with: git commit --no-verify${NC}"
    exit 1
fi

